/*
 * File: MidpointFindingKarel.java
 * -------------------------------
 * When you finish writing it, the MidpointFindingKarel class should
 * leave a beeper on the corner closest to the center of 1st Street
 * (or either of the two central corners if 1st Street has an even
 * number of corners).  Karel can put down additional beepers as it
 * looks for the midpoint, but must pick them up again before it
 * stops.  The world may be of any size, but you are allowed to
 * assume that it is at least as tall as it is wide.
 */

import stanford.karel.*;

public class MidpointFindingKarel extends SuperKarel {

	// You fill in this part
	// this only works for odd number of points greater than 3 and u have to change only the value of i
	public void run() {
		move();
		while (frontIsClear()) {
			putBeeper();
			move();
		}
	for (int i=0;i<2;i++) {
		rtolMovemet();
		leftMovement();
		ltorMovement();
		rightMovement();
	}
		
}
	private void rtolMovemet() {
		turnLeft();
			move();
			turnLeft();
			
			while (frontIsClear()) {
				move();
			}
			turnLeft();
			move();
			turnLeft();
			while (noBeepersPresent()) {
				move();
				
			}
			if (beepersPresent()) {
				pickBeeper();
			}
			}
		private void leftMovement() {
		turnLeft();
			turnLeft();
			while (frontIsClear() ) {
				move();
			}
			}
		private void ltorMovement() {
			turnRight();
			move();
			turnRight();
			while (frontIsClear()) {
				move();
			}
			turnRight();
			move();
			turnRight();
			while (noBeepersPresent()) {
				move();
			}
			if (beepersPresent()) {
				pickBeeper();
			}
			}
		private void rightMovement() {
		turnRight();
			turnRight();
			while (frontIsClear()) {
				move();
			}
			}
			
}