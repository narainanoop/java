/*
 * File: MidpointFindingKarel.java
 * -------------------------------
 * When you finish writing it, the MidpointFindingKarel class should
 * leave a beeper on the corner closest to the center of 1st Street
 * (or either of the two central corners if 1st Street has an even
 * number of corners).  Karel can put down additional beepers as it
 * looks for the midpoint, but must pick them up again before it
 * stops.  The world may be of any size, but you are allowed to
 * assume that it is at least as tall as it is wide.
 */

import stanford.karel.*;

public class MidpointFindingKarel extends SuperKarel {

	// You fill in this part
	public void run() {
		move();
		while (frontIsClear()) {
			putBeeper();
			move();
		}
		turnLeft();
		move();
		turnLeft();
		while (frontIsClear()) {
			move(); 
			
		}
		turnLeft();
		move();
		turnLeft();
		move();
		move();
		if (beepersPresent()) {
			turnLeft();
			turnLeft();
			move();
			pickBeeper();
		}
		while (frontIsClear()) {
			move();
		}
		turnRight();
		move();
		turnRight();
		while (frontIsClear()) {
			move();
		}
		turnRight();
		move();
		turnRight();
		move();
		move();
		if (beepersPresent()) {
			turnLeft();
			turnLeft();
			move();
			pickBeeper();
		}
	while (frontIsClear()) {
	move();
	}
	turnLeft();
	move();
	turnLeft();
	while (frontIsClear()) {
		move();
	}
	turnLeft();
	move();
	turnLeft();
	move();
	move();
	move();
	if (beepersPresent()) {

	turnLeft();
	turnLeft();
	move();
	pickBeeper();
	}
	while (frontIsClear()) {
		move();
	}
	turnRight();
	move();
	turnRight();
	while (frontIsClear() ) {
		move();
	}
	turnRight();
	move();
	turnRight();
	move();
	move();
	if (beepersPresent() ) {
		move();
		
	}
		turnRight();
		turnRight();
		move();
		pickBeeper();
		while (frontIsClear()) {
			move();
							
		}
		turnLeft();
		move();
		turnLeft();
		while (frontIsClear()) {
			move();
		}
		turnLeft();
		move();
		turnLeft();
		if (beepersPresent()) {

			turnLeft();
			turnLeft();
			move();
			pickBeeper();
			}
		move();
		move();
		move();
		move();
		if (beepersPresent()) {
			turnRight();
			turnRight();
			move();
			pickBeeper();
			
			while (frontIsClear()) {
				move();
			}
		}
		turnRight();
		move();
		turnRight();
		while (frontIsClear()) {
			move();
		}
		turnRight();
		move();
		turnRight();
		move();
		move();
		move();
		if (beepersPresent()) {
			move();
		}
		turnRight();
		turnRight();
		move();
		pickBeeper();
		while (frontIsClear()) {
			move();
		}
		turnLeft();
		move();
		turnLeft();
		while (frontIsClear()) {
			move();
		}
		turnLeft();
		move();
		turnLeft();
		while (beepersPresent()) {
			move();
		}
		move();
		move();
		move();
		move();
}
}